"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import os
from datetime import timedelta
from dotenv import load_dotenv
from os.path import join, dirname

dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

import requests

def get_external_ip():
    try:
        response = requests.get("https://ifconfig.me")
        return response.text.strip()
    except requests.RequestException:
        return "127.0.0.1" # Fallback to localhost

IP =  get_external_ip()

URL_IP = f"https://{IP}:1234"

ALLOWED_HOSTS = ["localhost", IP, "10.14.5.3", "10.14.5.4", "10.14.5.2", "10.14.5.5"]


CSRF_TRUSTED_ORIGINS = [
    'https://localhost:1234',
]

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django_truncate',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

# --
	'django_otp',
	'django_otp.plugins.otp_totp',
#(Django One-Time Password) is a Django application that adds two-factor authentication (2FA)

   'corsheaders',

# Add our new app here :
    'chat',
	'rest_framework',
    'rest_framework_simplejwt',
	'users',
	'authent',
    'pong',
    'stats',
]

REST_FRAMEWORK = {
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    # ),    
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'authent.authentication.CookiesJWTAuthentication',
		'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
		# 'rest_framework.permissions.IsAdminUser',
		'rest_framework.permissions.AllowAny',
    ]
	# This permission class ensures that only authenticated users can access the API. 
	# When this permission is applied, any view will require the user to be logged in, 
	# or they will receive a 403 Forbidden response.

}

SIMPLE_JWT = {

    "ACCESS_TOKEN_LIFETIME": timedelta(hours=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=2),
	
}

# dj-rest-auth
REST_AUTH = {
    "USE_JWT": True,

}

AUTH_USER_MODEL = 'users.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'django_otp.middleware.OTPMiddleware',

    'corsheaders.middleware.CorsMiddleware',

]

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

ASGI_APPLICATION = "django_project.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],
            "capacity": 1500,
            "expiry": 10,  # default 60
        },
    },
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get('POSTGRES_DB'),
        "USER": os.environ.get('POSTGRES_USER'),
        "PASSWORD": os.environ.get('POSTGRES_PASSWORD'),
        "HOST": "db",  # set in docker-compose.yml
        "PORT": 5432,  # default postgres port
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# URL which will serve the static files
STATIC_URL = '/project-static/'

# Path to the directory where static files have been collected
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# List of additional directories where Django will look for static files
STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, "static"),
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# PROTECTION CSRF (Cross-site request forgery) FOR THE AUTHENTICATION
CSRF_TRUSTED_ORIGINS = [
    "https://localhost:1234",
	URL_IP
]

# PROTECTION XSS (cross-site scripting) WITH CORS (Cross-Origin Resource Sharing)
CORS_ALLOW_ALL_ORIGINS = True # allow request for all origins, turn in to False to allow only specific origins
CORS_ALLOW_CREDENTIALS = True # allow cookies to be sent with the requests 
CORS_ALLOWED_ORIGINS = [
    "https://localhost:1234",
	URL_IP
] # list of origins that are allowed to make requests



CORS_ALLOW_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'] # list of HTTP methods that are allowed
CORS_ALLOW_HEADERS = [ # list of headers that are allowed
    'content-type',
    'origin',
    'x-csrftoken',
    'x-requested-with',
    'accept',
    'authorization',
    'x-csrftoken'
]

# Cookie securises et redirection vers HTTPS 
SECURE_SSL_REDIRECT = True # http requests are redirected to https
SESSION_COOKIE_SECURE = True # only send over https
CSRF_COOKIE_SECURE = True # only send over https

# HSTS (HTTP Strict Transport Security)
SECURE_HSTS_SECONDS = 31536000  # Durée de la politique HSTS en secondes (1 an)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Inclut les sous-domaines dans la politique HSTS
SECURE_HSTS_PRELOAD = True  # Précharge la politique HSTS dans les navigateurs

# Autres configurations de sécurité
SECURE_BROWSER_XSS_FILTER = True  # Active le filtre XSS du navigateur
SECURE_CONTENT_TYPE_NOSNIFF = True  # Empêche les navigateurs de deviner le type de contenu

# Configuration du proxy SSL
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Utilise l'en-tête X-Forwarded-Proto pour déterminer si la connexion est sécurisée
USE_X_FORWARDED_HOST = True  # Utilise l'en-tête X-Forwarded-Host transmis par le proxy


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # SMTP server for Gmail; modify if using a different provider
EMAIL_PORT = 587  # Port number for TLS
EMAIL_USE_TLS = True  # Enable TLS encryption
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')
